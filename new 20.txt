
variable "v_vpc_cidr"{
  type = string
  default ="10.0.0.0/16"
}
	


/* creating a vpc */

resource aws_vpc "vpc1" {
           cidr_block = var.v_vpc_cidr
		   enable_dns_hostnames = "true"
		   tags = {
		         "Name" = "sam-vpc"
		          }
		               }

data aws_availability_zones "azs"{
		
                             }

/* creating subnets */
/* creating 1 pub & 1 prv subnets in each AZ */

	
resource aws_subnet "sn" {
      count=length(data.aws_availability_zones.azs.names)*2
      vpc_id = aws_vpc.vpc1.id
	  cidr_block=cidrsubnet(var.v_vpc_cidr, 8,count.index)
	  availability_zone=data.aws_availability_zones.azs.names[count.index%length(data.aws_availability_zones.azs.names)]
      map_public_ip_on_launch=length(data.aws_availability_zones.azs.names)>count.index?true:false
	  tags = {
	     "Name" = count.index<4?join("-",["aws","pub","sn",count.index]):join("-",["aws","prv","sn",count.index])
	         }
	  depends_on = [aws_vpc.vpc1]
                          }

						
resource aws_internet_gateway "igw" {
	vpc_id = aws_vpc.vpc1.id
	}

resource aws_eip "eip" {
}

resource aws_nat_gateway "nat"{
	allocation_id = aws_eip.eip.id
	subnet_id = aws_subnet.sn[0].id
	}
resource aws_route_table "rt" {
count = 2
vpc_id =aws_vpc.vpc1.id
	route {
			cidr_block = "0.0.0.0/0"
			gateway_id = count.index==0? aws_internet_gateway.igw.id : aws_nat_gateway.nat.id 
			}
			}
resource "aws_route_table_association" "rta" {
  count  		 =length(data.aws_availability_zones.azs.names)
  subnet_id      = count.index<3? aws_subnet.sn.*.id[count.index%length(data.aws_availability_zones.azs.names)]:aws_subnet.sn.*.id[count.index+3%length(data.aws_availability_zones.azs.names)*3]
  route_table_id = count.index<3? aws_route_table.rt[0].id : aws_route_table.rt[1].id
}

resource aws_lb_target_group "tg" {
count=2
name = "sam-target"
vpc_id = aws_vpc.vpc1.id
port = 80
protocol = "HTTP"
  tags = {
  Name =count.index==0? "sam1":"sam2"
  }
  }



resource "aws_security_group" "sg" {
  name        = "aws_sg"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.vpc1.id

  ingress {
    description      = "TLS from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
	}
	
ingress {
    description      = "TLS from VPC"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
	}
	
 ingress {
    description      = "TLS from VPC"
    from_port        = 8080
    to_port          = 8080
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
	}
	
 ingress {
    description      = "TLS from VPC"
    from_port        = 90
    to_port          = 90
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
	}
	


  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    
  }

  tags = {
    Name = "sg"
  }
}
							 

resource "aws_lb" "alb" {
  name               = "lb-1"
   
  load_balancer_type = "application"
 security_groups    = [aws_security_group.sg.id] 
  subnets            = slice(aws_subnet.sn.*.id,0,3)

  enable_deletion_protection = false

}

resource aws_lb_listener "attachment" {
 
  load_balancer_arn = aws_lb.alb.arn
  port              = "80"
  protocol          = "HTTP"
  

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg[0].arn
  }
} 
resource aws_instance "s1" {
count = length(data.aws_availability_zones.azs.names)
ami =  "ami-0756a1c858554433e"
vpc_security_group_ids = [aws_security_group.sg.id]
subnet_id =aws_subnet.sn.*.id[count.index+length(data.aws_availability_zones.azs.names)]
instance_type = "c5.large"
key_name = "naina"
user_data = <<EOF
		#! /bin/bash
        sudo apt-get update
		sudo apt-get install apache2 -y 
		  EOF
	


depends_on = [aws_nat_gateway.nat]
tags = {
Name = join("-",["instance",count.index])
}
}


resource aws_instance "basion" {
ami = "ami-0756a1c858554433e"
instance_type = "t2.micro"
vpc_security_group_ids = [aws_security_group.sg.id]
subnet_id = aws_subnet.sn[0].id
key_name = "naina"
user_data = <<EOF
		#! /bin/bash
        sudo apt-get update
		sudo apt-get install apache2 -y 
		
	  EOF
	tags = {
		Name = "Terraform"	
		Batch = "5AM"
	}

}
resource "aws_lb_target_group_attachment" "tga" {
count = length(data.aws_availability_zones.azs.names)
  target_group_arn = aws_lb_target_group.tg[0].arn
  target_id        = count.index==0? aws_instance.s1.*.id[0]:aws_instance.s1.*.id[1]
  port             = 80
}
resource aws_vpc_endpoint "vpce" {
  vpc_id       = aws_vpc.vpc1.id
  subnet_ids  = slice(aws_subnet.sn.*.id,3,5)
  service_name = "com.amazonaws.ap-south-1.s3"
  vpc_endpoint_type = "Interface"
  security_group_ids = [aws_security_group.sg.id]
  
  tags = { 
  Name = "vpce" 
  }
} 





FROM ubuntu
WORKDIR /app
RUN apt-get update && apt-get install open-jre -y
COPY PrimeNumber.class .
CMD ["java","PrimeNumber.class"]





